function Render():
 2 for i in iterations: 
 3  RenderImage() 
 5  + for Leaf in NextCache: 
 6  + Leaf.Value := Sqrt( 
 7  + Leaf.Value * Leaf.Area 
 8  + ) 
 9 
10  NextCache.Normalize() 
11  CurrentCache := NextCache 
12  NextCache.Reset() 
13 
14  function Lo(x, ωo, 
15  + RelThroughput): 
16  // One sample MIS 
17  if Random() > α: 
18      ωi := CurrentCache(x).Sample() 
19  else: 
20      ωi := BSDF(x, ωo).Sample() 
21  // MIS computations 
22  MisPDF := (1-α) * CurrentCache(x).PDF(ωi) + α * BSDF(x, ωo).PDF(ωi) 
24  + MisWeight := CurrentCache(x).PDF(ωi) / MisPDF 
25  // Compute recursive estimate 
26  BsdfCos := BSDF(x, ωo).Eval(ωi) * Cos(θi) 
27  Li := Lo(RayTrace(x, ωi), -ωi, + RelThroughput * BsdfCos / MisPDF) 
29  // Update guiding cache 
30  NextCache.Leaf(x, ωi) += (1 / MisPDF) * 
31  - Li
32  + (BsdfCos * Li * MisWeight * RelThroughput)^2 
33  // Update BSDF sampling fraction loss 
34  MISLoss(x).Update( 
35   BsdfCos * Li
36 + * RelThroughput 
37 ) 
38 // Compute rendering equation estimate 
39 return Le(x, ωo) + BsdfCos * Li / MisPDF